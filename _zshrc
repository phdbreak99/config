# If you come from bash you might have to change your $PATH.
export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

ZSH_DISABLE_COMPFIX=true

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="dracula"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git osx python)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

PROMPT='
%F{green}%n@%m: %F{blue}%/%f $(git_prompt_info)
%F{green}âžœ  %f'

RPROMPT='%t'

zle_highlight=(default:fg=green) # change input text color

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

setopt nosharehistory

# # function cd_func
# # This function defines a 'cd' replacement function capable of keeping, 
# # displaying and accessing history of visited directories, up to 10 entries.
# # To use it, uncomment it, source this file and try 'cd --'.
# # acd_func 1.0.5, 10-nov-2004
# # Petar Marinov, http:/geocities.com/h2428, this is public domain
# cd_func_linux () {
#   local x2 the_new_dir adir index
#   local -i cnt
# 
#   if [[ $1 ==  "--" ]]; then
#     dirs -v
#     return 0
#   fi
# 
#   the_new_dir=$1
#   [[ -z $1 ]] && the_new_dir=$HOME
# 
#   if [[ ${the_new_dir:0:1} == '-' ]]; then
#     #
#     # Extract dir N from dirs
#     index=${the_new_dir:1}
#     [[ -z $index ]] && index=1
#     adir=$(dirs +$index)
#     [[ -z $adir ]] && return 1
#     the_new_dir=$adir
#   fi
# 
#   #
#   # '~' has to be substituted by ${HOME}
#   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
# 
#   #
#   # Now change to the new dir and add to the top of the stack
#   pushd "${the_new_dir}" > /dev/null
#   [[ $? -ne 0 ]] && return 1
#   the_new_dir=$(pwd)
#   ls -hF --color=tty
# 
#   #
#   # Trim down everything beyond 11th entry
#   popd -n +11 2>/dev/null 1>/dev/null
# 
#   #
#   # Remove any other occurence of this dir, skipping the top of the stack
#   for ((cnt=1; cnt <= 10; cnt++)); do
#     x2=$(dirs +${cnt} 2>/dev/null)
#     [[ $? -ne 0 ]] && return 0
#     [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
#     if [[ "${x2}" == "${the_new_dir}" ]]; then
#       popd -n +$cnt 2>/dev/null 1>/dev/null
#       cnt=cnt-1
#     fi
#   done
# 
#   return 0
# }

cd_func_linux () {
    cd $1
    ls
}

cd_func_osx () {
    cd $1
    ls
}

mkcd () {
    mkdir $1
    cd $1
}

shortcut () {
    local cmd
    cmd=$(~/script/shortcut.py $@)
    eval ${cmd}
}

pwd_func() {
    local cur_dpath
    cur_dpath=$(\pwd)

    if [[ ! -z $1 ]]; then
        cur_dpath=${cur_dpath}/$1
    fi
    echo $cur_dpath

    case `uname` in
        Darwin)
            # commands for OS X go here
            echo ${cur_dpath} | sed 's/\n//g' | pbcopy
            pbpaste
        ;;
        Linux)
            # commands for Linux go here
            echo ${cur_dpath} | sed 's/\n//g' | \xclip -selection clipboard
            \xclip -selection clipbard -o
        ;;
    esac
}

file_to_clipboard () {
    case `uname` in
        Darwin)
            # commands for OS X go here
            cat $1 | pbcopy
        ;;
        Linux)
            # commands for Linux go here
            cat $1 | sed 's/\n//' | \xclip -selection clipboard
        ;;
    esac
}

clipboard_to_file () {
    case `uname` in
        Darwin)
            # commands for OS X go here
            pbpaste > $1
        ;;
        Linux)
            # commands for Linux go here
            \xclip -selection clipboard -p > $1
        ;;
    esac
}

set_display () {
    cat ~/.display
    source ~/.display
}

set_title() {
    printf "\033k$1\033\\"
}

#move files/folders to Trash, instead of rm

function move_to_trash() {
    # Move files or folders to Trash instead of deleting them
    echo "Moving the deleted files/folders to Trash..."
    dir_tmp=$TRASH_DIR/`date +%Y.%m.%d`
    subdir_tmp=$dir_tmp/`date +%H.%M.%S`
    if [ ! -d $dir_tmp ]; then
        mkdir $dir_tmp
    fi
    if [ ! -d $subdir_tmp ]; then
        mkdir $subdir_tmp
    fi
    mv -t $subdir_tmp --backup=t --verbose $@
    echo -e "The directory $subdir_tmp will be deleted after 30 days!"
}

function trash_cleanup() {
# cleanup the Trash: delete all files/folders older than 30 days
    find $TRASH_DIR/ -mtime +30 | xargs \rm -rf
}

# alias cd=cd_func
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

alias ln='ln -s'
alias mkcdir='mkcd'
alias du='du -m -d 1'
alias tmux='tmux -2'

alias go='shortcut go'
alias run='shortcut run'
alias add='shortcut add'
alias xclip='\xclip -selection clipbard'

alias ga='git add'
alias gs='git status -uno'
alias gf='git fetch'
alias gp='git push'
alias gc='git commit'
alias gm='git merge'
alias gm-master='gm origin/master'
alias gm-top='gm origin/top'
alias gm-orv='gm origin/orv'

export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:${PATH}
unset zle_bracketed_paste
case `uname` in
    Darwin)
        # commands for OS X go here
        export PATH=/opt/local/bin:/opt/local/sbin:/usr/local/Cellar/vim/8.0.0844/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        export PATH=/Library/TeX/Distributions/.DefaultTeX/Contents/Programs/texbin:${PATH}
        export MANPATH=/opt/local/share/man:$MANPATH
        alias cd=cd_func_osx
        alias pwd=pwd_func
        alias vdiff='vimdiff --noplugin'
        alias vi='vim'
    ;;
    Linux)
        # commands for Linux go here
        echo "export DISPLAY=$DISPLAY" > ~/.display
        export LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib:${LD_LIBRARY_PATH}

        alias cd=cd_func_linux
        alias pwd=pwd_func
        alias rm='move_to_trash'
        export TRASH_DIR=$HOME/.trash
        alias vi='vim -X'
        alias vdiff='vimdiff --noplugin'

        alias rgrep='grep -R'
        alias igrep='grep -i'

        export LS_COLORS='ow=01;36;40'; # change WSL windows folder color
        export SYSTEMC_HOME=/opt/systemc-2.3.3
    ;;
esac
